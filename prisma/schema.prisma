// File: prisma/schema.prisma (ฉบับปรับปรุงแก้ไข)

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===============================================
//  Enums
// ===============================================
enum OrderStatus {
  COMPLETED
  CREDIT
  HELD
  CANCELLED
}

enum BillingNoteStatus {
  PENDING
  PAID
  CANCELLED
}

// ✨ เพิ่มใหม่: Enum สำหรับประเภทการเคลื่อนไหวของสต็อก
enum StockMovementType {
  PURCHASE_IN   // รับเข้าจากการซื้อ
  SALE_OUT      // ขายออก
  RETURN_IN     // รับคืนจากลูกค้า
  ADJUST_ADD    // ปรับสต็อกเพิ่ม
  ADJUST_SUB    // ปรับสต็อกลด
}


// ===============================================
//  Model: PurchaseOrder (ใบสั่งซื้อ/ใบรับของ)
// ===============================================
model PurchaseOrder {
  id        Int                 @id @default(autoincrement())
  poNumber  String              @unique
  notes     String?             @db.Text
  totalCost Decimal
  createdAt DateTime            @default(now())
  supplier  Supplier            @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  supplierId Int
  items     PurchaseOrderItem[]
}

// ===============================================
//  Model: PurchaseOrderItem (รายการสินค้าในใบรับของ)
// ===============================================
model PurchaseOrderItem {
  id              Int           @id @default(autoincrement())
  quantity        Int
  costPrice       Decimal
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseOrderId Int
  // ✅ ปรับปรุง: เพิ่ม onDelete: Restrict เพื่อป้องกันการลบสินค้าที่มีประวัติการซื้อ
  product         Product       @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId       Int
}

// ===============================================
//  Model: Supplier (ข้อมูลผู้ขาย)
// ===============================================
model Supplier {
  id             Int             @id @default(autoincrement())
  code           String          @unique
  name           String
  taxId          String?
  phone          String?
  fax            String?
  email          String?
  address        String?         @db.Text
  notes          String?         @db.Text
  creditDays     Int?
  paymentTerms   String?
  imageUrl       String?
  products       Product[]
  purchaseOrders PurchaseOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// ===============================================
//  Model: Customer (ข้อมูลลูกค้า/สมาชิก)
// ===============================================
model Customer {
  id                   Int           @id @default(autoincrement())
  memberCode           String        @unique
  title                String?
  firstName            String
  lastName             String?
  nationalId           String?       @unique
  phone                String?
  email                String?       // ✅ ปรับปรุง: ทำให้ email ไม่ซ้ำกันด้านล่าง
  dateOfBirth          DateTime?
  taxId                String?
  creditLimit          Decimal?
  address              String?       @db.Text
  shippingAddress      String?       @db.Text
  notes                String?       @db.Text
  imageUrl             String?
  membershipExpiryDate DateTime?
  orders               Order[]
  billingNotes         BillingNote[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // ✅ ปรับปรุง: เพิ่ม Index ที่ phone และทำให้ email ไม่ซ้ำกัน (ถ้ามี)
  @@unique([email])
  @@index([phone])
}

// ===============================================
//  Model: Unit (หน่วยนับสินค้า)
// ===============================================
model Unit {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ===============================================
//  Model: Category (ประเภทสินค้า)
// ===============================================
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ===============================================
//  Model: Product (ข้อมูลสินค้า)
// ===============================================
model Product {
  id                 Int                   @id @default(autoincrement())
  name               String
  alias              String?
  barcode            String?               @unique
  category           Category?             @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId         Int?
  unit               Unit?                 @relation(fields: [unitId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  unitId             Int?
  costPrice          Decimal
  retailPrice        Decimal
  wholesalePrice     Decimal?
  vatType            String?
  stockQuantity      Int                   @default(0)
  trackStock         Boolean               @default(true)
  reorderPoint       Int?
  purchaseLimit      Int?
  shelfLocation      String?
  expiryDate         DateTime?
  points             Int?
  notes              String?               @db.Text
  imageUrl           String?
  allowPriceEdit     Boolean               @default(false)
  supplier           Supplier?             @relation(fields: [supplierId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  supplierId         Int?
  OrderItems         OrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
  returns            ReturnItem[]
  stockLedger        StockLedger[] // ✨ เพิ่มใหม่: ความสัมพันธ์ไปยัง StockLedger
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  @@fulltext([name, alias, barcode])
}

// ===============================================
// ✨ เพิ่มใหม่: Model: StockLedger (ประวัติการเคลื่อนไหวของสินค้า)
// ===============================================
model StockLedger {
  id               Int               @id @default(autoincrement())
  type             StockMovementType // ประเภท: ซื้อเข้า, ขายออก, รับคืน, ปรับสต็อก
  quantityChange   Int               // จำนวนที่เปลี่ยนแปลง (เช่น +10 สำหรับรับเข้า, -2 สำหรับขาย)
  newStockQuantity Int               // จำนวนสต็อกคงเหลือหลังการเปลี่ยนแปลง
  costAtTime       Decimal?          // ต้นทุน ณ เวลาที่เปลี่ยนแปลง (สำหรับบันทึกต้นทุนขาย)
  priceAtTime      Decimal?          // ราคา ณ เวลาที่เปลี่ยนแปลง (สำหรับบันทึกราคาขาย)
  notes            String?           @db.Text
  createdAt        DateTime          @default(now())
  product          Product           @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId        Int

  // อ้างอิงไปยังเอกสารต้นทาง (ถ้ามี)
  orderId          Int?
  purchaseOrderId  Int?
  returnId         Int?

  @@index([productId, createdAt]) // เพิ่ม index เพื่อการดึงข้อมูลประวัติที่รวดเร็ว
}

// ===============================================
//  Model: Order (ข้อมูลบิลการขาย)
// ===============================================
model Order {
  id              Int               @id @default(autoincrement())
  orderNumber     String            @unique
  total           Decimal
  received        Decimal?
  change          Decimal?
  status          OrderStatus       @default(COMPLETED)
  createdAt       DateTime          @default(now())
  customer        Customer?         @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customerId      Int?
  items           OrderItem[]
  billingNoteItem BillingNoteItem?
  returns         ProductReturn[]
}

// ===============================================
//  Model: OrderItem (รายการสินค้าในบิล)
// ===============================================
model OrderItem {
  id               Int     @id @default(autoincrement())
  quantity         Int
  price            Decimal
  discount         Decimal @default(0)
  order            Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId          Int
  product          Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId        Int
  returnedQuantity Int     @default(0)
}

// ===============================================
//  Model: ProductReturn (หัวบิลการรับคืน)
// ===============================================
model ProductReturn {
  id                Int          @id @default(autoincrement())
  originalOrderId   Int
  totalRefundAmount Decimal
  reason            String?
  createdAt         DateTime     @default(now())
  originalOrder     Order        @relation(fields: [originalOrderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  items             ReturnItem[]
  @@map("product_returns")
}

// ===============================================
//  Model: ReturnItem (รายการสินค้าที่รับคืน)
// ===============================================
model ReturnItem {
  id              Int           @id @default(autoincrement())
  productReturnId Int
  productId       Int
  quantity        Int
  priceAtReturn   Decimal
  productReturn   ProductReturn @relation(fields: [productReturnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product         Product       @relation(fields: [productId], references: [id], onUpdate: Cascade)
  @@map("return_items")
}

// ===============================================
//  Models สำหรับ Authentication
// ===============================================
model User {
  id       String    @id
  username String    @unique
  password String
  role     String    @default("USER")
  sessions Session[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ===============================================
//  Model: BillingNote (ใบวางบิล/ใบแจ้งหนี้)
// ===============================================
model BillingNote {
  id          Int               @id @default(autoincrement())
  bnNumber    String            @unique
  totalAmount Decimal
  status      BillingNoteStatus @default(PENDING)
  paidAt      DateTime?
  createdAt   DateTime          @default(now())
  customer    Customer          @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  customerId  Int
  items       BillingNoteItem[]
}

// ===============================================
//  Model: BillingNoteItem (รายการบิลในใบวางบิล)
// ===============================================
model BillingNoteItem {
  id            Int         @id @default(autoincrement())
  billingNote   BillingNote @relation(fields: [billingNoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billingNoteId Int
  order         Order       @relation(fields: [orderId], references: [id], onUpdate: Cascade)
  orderId       Int         @unique
}

// ===============================================
//  Model: Settings (การตั้งค่าระบบ)
// ===============================================
model Settings {
  id             Int      @id @default(1)
  storeName      String   @default("My POS Store")
  address        String?  @db.Text
  phone          String?
  taxId          String?
  defaultVat     Decimal  @default(7.00)
  receiptNote    String?  @db.Text
  receiptLogoUrl String?
  updatedAt      DateTime @updatedAt
}