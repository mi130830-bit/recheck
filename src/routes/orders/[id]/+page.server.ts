// src/routes/orders/[id]/+page.server.ts

import { db } from '$lib/server/db';
// [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏° fail ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô import ‡∏ô‡∏µ‡πâ
import { error, fail, redirect } from '@sveltejs/kit';
import type { PageServerLoad, Actions } from './$types';
import { sendTelegramMessage, ChatId } from '$lib/server/telegram';

// --- `load` function: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á ---
export const load: PageServerLoad = async ({ params }) => {
	const orderId = Number(params.id);
	if (isNaN(orderId)) {
		// `error` ‡∏ñ‡∏π‡∏Å import ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
		throw error(400, 'ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
	}

	const orderFromDb = await db.order.findUnique({
		where: { id: orderId },
		include: {
			customer: true,
			items: { include: { product: true } }
		}
	});

	if (!orderFromDb) {
		throw error(404, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•');
	}

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Decimal ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Number ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Client
	const order = {
		...orderFromDb,
		total: orderFromDb.total.toNumber(),
		received: orderFromDb.received?.toNumber() ?? null,
		change: orderFromDb.change?.toNumber() ?? null,
		customer: orderFromDb.customer
			? {
					...orderFromDb.customer,
					creditLimit: orderFromDb.customer.creditLimit?.toNumber() ?? null
				}
			: null,
		items: orderFromDb.items.map((item) => ({
			...item,
			price: item.price.toNumber(),
			discount: item.discount.toNumber(),
			product: {
				...item.product,
				costPrice: item.product.costPrice.toNumber(),
				retailPrice: item.product.retailPrice.toNumber(),
				wholesalePrice: item.product.wholesalePrice ? item.product.wholesalePrice.toNumber() : null
			}
		}))
	};

	return { order };
};

// --- `actions`: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ---
export const actions: Actions = {
	cancel: async ({ request, params }) => {
		const orderId = Number(params.id);
		const formData = await request.formData();
		const shouldRestock = formData.get('shouldRestock') === 'true';

		try {
			const orderToCancel = await db.order.findUnique({
				where: { id: orderId },
				include: { items: true }
			});

			if (!orderToCancel) {
				return fail(404, { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' });
			}
			if (orderToCancel.status === 'CANCELLED') {
				return fail(400, { success: false, message: '‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' });
			}

			if (shouldRestock) {
				await db.$transaction(async (tx) => {
					for (const item of orderToCancel.items) {
						await tx.product.update({
							where: { id: item.productId },
							data: { stockQuantity: { increment: item.quantity } }
						});
					}
					await tx.order.update({
						where: { id: orderId },
						data: { status: 'CANCELLED' }
					});
				});
			} else {
				await db.order.update({
					where: { id: orderId },
					data: { status: 'CANCELLED' }
				});
			}

			return { success: true, message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
		} catch (err) {
			console.error('Cancel order error:', err);
			return fail(500, { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏¥‡∏•' });
		}
	},

	dispatch: async ({ params }) => {
		const orderId = Number(params.id);

		try {
			// 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (items) ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (product) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
			const order = await db.order.findUnique({
				where: { id: orderId },
				include: {
					customer: true,
					items: {
						include: {
							product: true
						}
					}
				}
			});

			if (!order) {
				return fail(404, { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•' });
			}

			// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
			let message = `üöö **‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤** üöö\n\n`;

			if (order.customer) {
				message += `**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** ${order.customer.firstName} ${order.customer.lastName || ''}\n`;
				if (order.customer.phone) {
					message += `**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:** \`${order.customer.phone}\`\n`;
				}
				if (order.customer.address) {
					message += `**‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:**\n${order.customer.address}\n`;
				}
			} else {
				message += `**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n`;
			}

			// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
			if (order.items.length > 0) {
				message += `\n--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á ---\n`;
				order.items.forEach((item, index) => {
					message += `${index + 1}. ${item.product.name} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô)\n`;
				});
				message += `--------------------\n\n`;
			}
			
			// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢
			message += `**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô**`;


			// 3. ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
			await sendTelegramMessage(message, ChatId.SHIPPING);

			await db.order.update({
				where: { id: orderId },
				data: { status: 'SHIPPING' }
			});
			
			return { success: true, message: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' };

		} catch (err) {
			console.error('Dispatch order error:', err);
			return fail(500, { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
		}
	}
};