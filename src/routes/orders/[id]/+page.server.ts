// Path: src/routes/orders/[id]/+page.server.ts (Final Corrected Version)

import { db } from '$lib/server/db';
import { error, fail, redirect } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import { TELEGRAM_BOT_TOKEN, TELEGRAM_SHIPPING_CHAT_ID } from '$env/dynamic/private';

// ===================== LOAD FUNCTION (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) =====================
export const load: PageServerLoad = async ({ params }) => {
	const orderId = parseInt(params.id);
	if (isNaN(orderId)) {
		throw error(400, 'ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
	}

	const orderFromDb = await db.order.findUnique({
		where: { id: orderId },
		include: {
			customer: true,
			items: { include: { product: true } }
		}
	});

	if (!orderFromDb) {
		throw error(404, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ');
	}

	// [‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Decimal ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô customer
	const serializableCustomer = orderFromDb.customer
		? {
				...orderFromDb.customer,
				creditLimit: orderFromDb.customer.creditLimit ? orderFromDb.customer.creditLimit.toNumber() : null
		  }
		: null;

	const order = {
		...orderFromDb,
		total: orderFromDb.total.toNumber(),
		received: orderFromDb.received ? orderFromDb.received.toNumber() : null,
		change: orderFromDb.change ? orderFromDb.change.toNumber() : null,
		customer: serializableCustomer, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
		items: orderFromDb.items.map(item => ({
			...item,
			price: item.price.toNumber(),
			discount: item.discount.toNumber(),
			product: {
                ...item.product,
                costPrice: item.product.costPrice.toNumber(),
                retailPrice: item.product.retailPrice.toNumber(),
                wholesalePrice: item.product.wholesalePrice ? item.product.wholesalePrice.toNumber() : null,
            }
		}))
	};

	return { order };
};

// ===================== ACTIONS (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£) =====================
export const actions: Actions = {
	notifyShipping: async ({ request }) => {
		const data = await request.formData();
		const orderId = data.get('id');
		if (!orderId || typeof orderId !== 'string') {
			return fail(400, { message: 'ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
		}
		const order = await db.order.findUnique({
			where: { id: Number(orderId) },
			include: { customer: true, items: { include: { product: true } } }
		});
		if (!order) return fail(404, { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
        
		let message = `üöö **[‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á]** üöö\n\n`;
		message += `**‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•:** ${order.orderNumber}\n`;
		message += `**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** ${order.customer?.firstName || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}\n`;
		message += `**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:** ${order.customer?.phone || '-'}\n`;
		message += `**‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:** ${order.customer?.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}\n\n`;
		message += `**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:**\n`;
		order.items.forEach((item, index) => {
			message += `${index + 1}. ${item.product.name} (x${item.quantity})\n`;
		});
		message += `\n**‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:** ${order.total.toNumber().toFixed(2)} ‡∏ö‡∏≤‡∏ó`;

		try {
			if (!TELEGRAM_SHIPPING_CHAT_ID) {
				console.error('TELEGRAM_SHIPPING_CHAT_ID is not defined');
				return fail(500, { message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
			}
			await sendTelegramMessage(message, TELEGRAM_SHIPPING_CHAT_ID, TELEGRAM_BOT_TOKEN);
			return { success: true, message: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' };
		} catch (err) {
			console.error('Failed to send Telegram message:', err);
			return fail(500, { message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
		}
	}
};

async function sendTelegramMessage(text: string, chatId: string, botToken: string) {
	const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
	const payload = { chat_id: chatId, text: text, parse_mode: 'Markdown' };
	const response = await fetch(url, {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify(payload)
	});
	if (!response.ok) {
		const errorData = await response.json();
		throw new Error(`Telegram API error: ${errorData.description}`);
	}
	return response.json();
}