// Path: src/routes/orders/[id]/+page.server.ts (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)

import { db } from '$lib/server/db';
import { error, fail } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import { TELEGRAM_BOT_TOKEN, TELEGRAM_SHIPPING_CHAT_ID } from '$env/dynamic/private';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô load (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ db instance ‡∏Å‡∏•‡∏≤‡∏á)
export const load: PageServerLoad = async ({ params }) => {
	const orderId = parseInt(params.id);

	if (isNaN(orderId)) {
		throw error(400, 'ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
	}

	const order = await db.order.findUnique({
		where: { id: orderId },
		include: {
			customer: true,
			items: {
				include: {
					product: true
				}
			}
		}
	});

	if (!order) {
		throw error(404, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ');
	}

	return { order };
};

// [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Form Actions
export const actions: Actions = {
	// Action ‡∏ä‡∏∑‡πà‡∏≠ 'notifyShipping'
	notifyShipping: async ({ request }) => {
		const data = await request.formData();
		const orderId = data.get('id');

		if (!orderId || typeof orderId !== 'string') {
			return fail(400, { message: 'ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
		}

		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
		const order = await db.order.findUnique({
			where: { id: Number(orderId) },
			include: {
				customer: true,
				items: { include: { product: true } }
			}
		});

		if (!order) {
			return fail(404, { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
		}

		// --- VVVVVV ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà VVVVVV ---
		let message = `üöö **[‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á]** üöö\n\n`;
		message += `**‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•:** ${order.orderNumber}\n`;
		message += `**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** ${order.customer?.name || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}\n`;
		message += `**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:** ${order.customer?.phone || '-'}\n`;
		message += `**‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:** ${order.customer?.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}\n\n`;
		message += `**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:**\n`;
		order.items.forEach((item, index) => {
			message += `${index + 1}. ${item.product.name} (x${item.quantity})\n`;
		});
		message += `\n**‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:** ${order.total.toFixed(2)} ‡∏ö‡∏≤‡∏ó`;
		// --- ^^^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ^^^^^^ ---

		try {
			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ID ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
			if (!TELEGRAM_SHIPPING_CHAT_ID) {
				console.error('TELEGRAM_SHIPPING_CHAT_ID is not defined in .env file');
				return fail(500, { message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
			}

			// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
			await sendTelegramMessage(message, TELEGRAM_SHIPPING_CHAT_ID, TELEGRAM_BOT_TOKEN);

			return { success: true, message: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' };

		} catch (err) {
			console.error('Failed to send Telegram message:', err);
			return fail(500, { message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' });
		}
	}
};


// [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Telegram
async function sendTelegramMessage(text: string, chatId: string, botToken: string) {
	const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
	const payload = {
		chat_id: chatId,
		text: text,
		parse_mode: 'Markdown' // ‡πÉ‡∏ä‡πâ Markdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤ (**) ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
	};

	const response = await fetch(url, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify(payload)
	});

	if (!response.ok) {
		const errorData = await response.json();
		throw new Error(`Telegram API error: ${errorData.description}`);
	}

	return response.json();
}