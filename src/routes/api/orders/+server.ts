// Path: src/routes/api/orders/+server.ts (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)

import { db } from '$lib/server/db';
import { json, error } from '@sveltejs/kit';
import { sendTelegramMessage, ChatId } from '$lib/server/telegram';
import {
	generateOrderNumber,
	validateAndCalculateCart,
	checkStockAvailability
} from '$lib/server/orderUtils';
import type { RequestHandler } from './$types';

export const POST: RequestHandler = async ({ request }) => {
	// [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏£‡∏±‡∏ö notifyDispatch ‡∏à‡∏≤‡∏Å request
	const { cart, customerId, paymentType, received, change, heldBillIdToDelete, notifyDispatch } =
		await request.json();

	if (!cart || cart.length === 0) {
		return json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤' }, { status: 400 });
	}

	try {
		const newOrder = await db.$transaction(async (tx) => {
			// --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ---
			await checkStockAvailability(cart, tx);
			const { grandTotal, validatedCart } = await validateAndCalculateCart(cart, tx);

			// --- 1.5 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (Credit Limit) ---
			if (paymentType === 'CREDIT') {
				if (!customerId) {
					throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
				}
				const customer = await tx.customer.findUnique({ where: { id: customerId } });
				if (!customer || customer.creditLimit === null) {
					throw new Error(`‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`);
				}
				const existingDebtResult = await tx.order.aggregate({
					_sum: { total: true },
					where: { customerId: customerId, status: 'CREDIT' }
				});
				const existingDebt = existingDebtResult._sum.total?.toNumber() || 0;
				if (existingDebt + grandTotal > customer.creditLimit.toNumber()) {
					throw new Error(
						`‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠! ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô: ${customer.creditLimit.toFixed(2)}, ‡∏´‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á: ${existingDebt.toFixed(2)}, ‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà: ${grandTotal.toFixed(2)}`
					);
				}
			}

			// --- 2. ‡∏•‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ---
			if (heldBillIdToDelete) {
				await tx.orderItem.deleteMany({ where: { orderId: heldBillIdToDelete } });
				await tx.order.delete({ where: { id: heldBillIdToDelete } });
			}

			// --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà ---
			const orderNumber = await generateOrderNumber('', tx);

			// --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏´‡∏•‡∏±‡∏Å ---
			// [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î status ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
			const orderStatus = notifyDispatch ? 'SHIPPING' : (paymentType === 'CREDIT' ? 'CREDIT' : 'COMPLETED');
			const order = await tx.order.create({
				data: {
					orderNumber,
					total: grandTotal,
					...(customerId && { customer: { connect: { id: customerId } } }),
					status: orderStatus,
					received,
					change
				},
				// [‡πÄ‡∏û‡∏¥‡πà‡∏°] include items ‡πÅ‡∏•‡∏∞ product ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
				include: {
                    customer: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
			});

			// --- 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order Items, ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å, ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ---
			for (const item of validatedCart) {
				await tx.orderItem.create({
					data: {
						orderId: order.id,
						productId: item.id,
						quantity: item.quantity,
						price: item.retailPrice,
						discount: item.discount || 0
					}
				});
				const updatedProduct = await tx.product.update({
					where: { id: item.id },
					data: { stockQuantity: { decrement: item.quantity } }
				});
				await tx.stockLedger.create({
					data: {
						productId: item.id,
						type: 'SALE_OUT',
						quantityChange: -item.quantity,
						newStockQuantity: updatedProduct.stockQuantity,
						priceAtTime: item.retailPrice,
						costAtTime: item.costPrice,
						notes: `‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡∏¥‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${order.orderNumber}`,
						orderId: order.id
					}
				});
			}

			return order;
		});

		// --- 6. [‡πÄ‡∏û‡∏¥‡πà‡∏°] Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á notifyDispatch: true ‡∏°‡∏≤ ---
		if (notifyDispatch) {
			let message = `üöö **‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤** üöö\n\n`;
			if (newOrder.customer) {
				message += `**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** ${newOrder.customer.firstName} ${newOrder.customer.lastName || ''}\n`;
				if (newOrder.customer.phone) message += `**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:** \`${newOrder.customer.phone}\`\n`;
				if (newOrder.customer.address) message += `**‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:**\n${newOrder.customer.address}\n`;
			} else {
				message += `**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n`;
			}
			if (newOrder.items.length > 0) {
				message += `\n--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á ---\n`;
				newOrder.items.forEach((item, index) => {
					message += `${index + 1}. ${item.product.name} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô)\n`;
				});
				message += `--------------------\n\n`;
			}
			message += `**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô**`;
			await sendTelegramMessage(message, ChatId.SHIPPING);
		}

		// --- 7. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ö‡∏¥‡∏•‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥) ---
		const serializableOrder = {
			...newOrder,
			total: newOrder.total.toString(),
			received: newOrder.received ? newOrder.received.toString() : null,
			change: newOrder.change ? newOrder.change.toString() : null,
			items: newOrder.items.map(item => ({
				...item,
				price: item.price.toString(),
				discount: item.discount.toString()
			}))
		};

		if (newOrder.status === 'CREDIT' && newOrder.customer) {
			const customerName = `${newOrder.customer.firstName} ${newOrder.customer.lastName || ''}`.trim();
			const message = `üö® *‡∏ö‡∏¥‡∏•‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà*\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•: \`${newOrder.orderNumber}\`\n‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: *${newOrder.total.toString()}* ‡∏ö‡∏≤‡∏ó`;
			sendTelegramMessage(message, ChatId.SALES);
		}

		return json(serializableOrder, { status: 201 });
	} catch (err: any) {
		console.error('Error creating order:', err);
		if (err instanceof Error) {
			return json({ message: err.message }, { status: 400 });
		}
		if (err.code === 'P2002') {
			return json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }, { status: 409 });
		}
		throw error(500, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
	}
};