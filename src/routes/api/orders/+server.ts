// Path: src/routes/api/orders/+server.ts (Final Refactored Version)

import { db } from '$lib/server/db';
import { json, error } from '@sveltejs/kit';
import { sendTelegramMessage, ChatId } from '$lib/server/telegram';
import { generateOrderNumber, validateAndCalculateCart, checkStockAvailability } from '$lib/server/orderUtils';
import type { RequestHandler } from './$types';

export const POST: RequestHandler = async ({ request }) => {
	const { cart, customerId, paymentType, received, change, heldBillIdToDelete } = await request.json();

	if (!cart || cart.length === 0) {
		return json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤' }, { status: 400 });
	}

	try {
		const newOrder = await db.$transaction(async (tx) => {
			
			// --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ---
			await checkStockAvailability(cart, tx);
			const { grandTotal } = await validateAndCalculateCart(cart, tx);
			
			// --- 2. ‡∏•‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ---
			if (heldBillIdToDelete) {
				await tx.orderItem.deleteMany({ where: { orderId: heldBillIdToDelete }});
				await tx.order.delete({ where: { id: heldBillIdToDelete } });
			}
			
			// --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å Race Condition) ---
			const orderNumber = await generateOrderNumber('', tx);

			// --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏´‡∏•‡∏±‡∏Å ---
			const order = await tx.order.create({
				data: {
					orderNumber,
					total: grandTotal, // ‡πÉ‡∏ä‡πâ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å server
					...(customerId && { customer: { connect: { id: customerId } } }),
					status: paymentType === 'CREDIT' ? 'CREDIT' : 'COMPLETED',
					received,
					change
				},
				include: { customer: true }
			});

			// --- 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order Items ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ---
			for (const item of cart) {
				await tx.orderItem.create({
					data: {
						orderId: order.id,
						productId: item.id,
						quantity: item.quantity,
						price: item.retailPrice, // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å client (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB ‡∏Å‡πá‡πÑ‡∏î‡πâ)
						discount: item.discount || 0
					}
				});

				await tx.product.update({
					where: { id: item.id },
					data: { stockQuantity: { decrement: item.quantity } }
				});
			}

			// return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
			return order;
		});

		// --- 6. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
		const serializableOrder = {
			...newOrder,
			total: newOrder.total.toString(),
			received: newOrder.received ? newOrder.received.toString() : null,
			change: newOrder.change ? newOrder.change.toString() : null,
		};
		
		if (newOrder.status === 'CREDIT' && newOrder.customer) {
			const customerName = `${newOrder.customer.firstName} ${newOrder.customer.lastName || ''}`.trim();
			const message = `üö® *‡∏ö‡∏¥‡∏•‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà*\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•: \`${newOrder.orderNumber}\`\n‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: *${newOrder.total.toNumber().toFixed(2)}* ‡∏ö‡∏≤‡∏ó`;
			sendTelegramMessage(message, ChatId.SALES);
		}

		return json(serializableOrder, { status: 201 });

	} catch (err: any) {
		console.error('Error creating order:', err);
		if (err.code === 'P2002') { // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Unique constraint error
			return json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }, { status: 409 });
		}
		throw error(500, err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
	}
};